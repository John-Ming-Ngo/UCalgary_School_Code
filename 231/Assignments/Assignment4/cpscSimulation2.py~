#John Ming Ngo, V 1.0.1, Last Change 2016-11-25.
#Ucalgary ID 30020834
#Program Functionality:
#Problems: MASSIVE. CODE IS AN UNREADABLE MESS. MUST TOTALLY REFACTOR.
#Todo: Lots. Especially: Taminator, Pavol special events.
#Copyright 2016 John Ming Ngo and University of Calgary


import random

SIZE = 10
NUM_TURNS = 13
STUDENT = "S"
WORK = "w"
FUN = "f"
TAMINATOR = "T"
EMPTY = " "
debugOn = False

#Conveniance functions:

#Author: John Ming Ngo
# printClear() is a conveniance function which makes more explicit what print("\033c") does.
# Namely, it clears the terminal of the user.
# Arguments: None
# Returns: None
def printClear():
    print("\033c")

#Author: John Ming Ngo
# printBorder() is a conveniance function which prints a line of = signs for a border.
# Arguments: None
# Returns: None
def printBorder():
    print("==============================")

#Author: John Ming Ngo
# restrictedIntergerInput() is a convenience function which combines prompting the user
# for input with an input validation loop to check if the user's input is valid.
# As the intended output is an interger, it also converts the user input into an interger
# And uses exceptions to catch errors that way.
# Arguments: validInput is intended to be an interger, or a list or tuple of interger values.
# Returns: An interger within the domain of validInput.
def restrictedIntergerInput(validInput):
    inputNeeded = True
    while inputNeeded == True:
        try:
            userInput = int(input("[Enter your input here]: "))
            if userInput in validInput:
                inputNeeded = False
            else:
                print("Your input is not avaliable.")
                print("Avaliable input is displayed above.")
        except ValueError:
            print("Oh dear, that's no interger. Try again.")
    return userInput
        
    
#Author: John Ming Ngo
# restrictedStringInput() is a conveniance function which combines prompting the user for
# input with an input validation loop to check to see if the user's input is valid.
# Arguments: validInput is intended to be a string, tuple or a list corrisponding to all the
# valid inputs. However, other data types may also be used, if desired...
# Returns: One of the valid inputs as defined in the argument after user input.
def restrictedStringInput(validInput):
    inputNeeded = True
    while inputNeeded == True:
        userInput = input("[Enter your input here]: ")
        if userInput in validInput:
            inputNeeded = False
        else:
            print("Your input is not valid.")
            print("Valid input is displayed above.")
    return userInput

#Game-Relevant Text Functions:

#Author: John Ming Ngo
# printMovementOptions() is the movement menu to be displayed to the user.
# Arguments: None
# Returns: None
def printMovementOptions():
    print("MOVEMENT OPTIONS:")
    print("7 8 9")
    print("4 5 6")
    print("1 2 3")

#Author: John Ming Ngo
# printCheatMenu is the cheat menu to be displayed to the user.
# Arguments: None
# Returns: None
def printCheatMenu():
    print("Cheat Menu Options:")
    print("(t)oggle debug mode on/off")
    print("(m)ake the Taminator appear")
    print("(q)uit the cheat menu")

#Author: John Ming Ngo
# printFutileEscape is generic text meant to be displayed
# when the user attempts to move off the screen.
# Arguments: None
# Returns: None
def printFutileEscape():
    printBorder()
    print("YOU WISH TO ESCAPE!?")
    print("YOU CAN'T ESCAPE FROM CPSC!")
    print("Well, you can change majors...")
    print("BUT NO. WE WON'T LET YOU!")
    printBorder()

#Author: John Ming Ngo
# displayGameBoard is a modification to the original display function.
# It displays some other useful data in addition to calling on the
# original display function, in order to better format the screen.
# Arguments: world is a 2d list corridponding to the game world.
# Arguments: gpa is an interger corrisponding to the player's GPA score.
# Arguments: funPoints is an interger corrisponding to the player's fun score.
# Arguments: turns is an interger corrisponding to the current turn of the game.
# Returns: None.
def displayGameBoard(world, gpa, funPoints, turn):
    printClear()
    printBorder()
    print("Current Turn: %i" % turn)
    print("GPA: %i" % gpa, "Fun Points: %i" % funPoints)
    display(world)

#Game relevant calculation functions:

#Author: John Ming Ngo
# This function handles the movement of the student/player.
# It first reads a list corrisponding to the [row, column]
# position of the player, and then modifies this list according
# to another parameter, userMovement.
# Arguments: studentPosition is a list corrisponding to the
# [row, column] position of the player.
# Arguments: userMovement is a numeric string corrisponding to
# the user's inputed movement as determined by another function.

def studentMovement(studentPosition, userMovement):
    if userMovement == 1:
        studentPosition[0] = studentPosition[0] + 1
        studentPosition[1] = studentPosition[1] - 1
    elif userMovement == 2:
        studentPosition[0] = studentPosition[0] + 1
        studentPosition[1] = studentPosition[1] + 0
    elif userMovement == 3:
        studentPosition[0] = studentPosition[0] + 1
        studentPosition[1] = studentPosition[1] + 1
    elif userMovement == 4:
        studentPosition[0] = studentPosition[0] + 0
        studentPosition[1] = studentPosition[1] - 1
    elif userMovement == 5:
        studentPosition[0] = studentPosition[0] + 0
        studentPosition[1] = studentPosition[1] + 0
    elif userMovement == 6:
        studentPosition[0] = studentPosition[0] + 0
        studentPosition[1] = studentPosition[1] + 1
    elif userMovement == 7:
        studentPosition[0] = studentPosition[0] - 1
        studentPosition[1] = studentPosition[1] - 1
    elif userMovement == 8:
        studentPosition[0] = studentPosition[0] - 1
        studentPosition[1] = studentPosition[1] + 0
    elif userMovement == 9:
        studentPosition[0] = studentPosition[0] - 1
        studentPosition[1] = studentPosition[1] + 1
    else:
        print("Initiating cheat mode.")

#Author: John Ming Ngo
# This function scans the 2d list corrisponding to the world.
# It records the positions of the work, fun and student objects
# Within this world, and then returns lists corrisponding to
# their positions.
# Arguments: World is a 2d list corrisponding to the world.
# Returns: funPositions is a 2d lists containing lists with two
# interger entries, corrisponding to the [row, column] of each
# fun object in this world.
# Returns: funPositions is a 2d lists containing lists with two
# interger entries, corrisponding to the [row, column] of each
# fun object in this world.
# Returns: studentPosition is a 1d list corrisponding to the
# [row, column] position of the player in this world.

def worldObjectScan(world):
    workPositions = []
    funPositions = []
    studentPosition = []
    rowNumber = 0
    for row in world:
        columnNumber = 0
        for column in row:
            if column == WORK:
                workPositions.append([rowNumber, columnNumber])
            elif column == FUN:
                funPositions.append([rowNumber, columnNumber])
            elif column == STUDENT:
                studentPosition = [rowNumber, columnNumber]
            columnNumber += 1
        rowNumber += 1
    return workPositions, funPositions, studentPosition

#Author: John Ming Ngo
# This function presents the cheat menu to the user, prompts for the
# user's choice of action in the cheat menu, and then does the desired
# changes to the game.
# Arguments: None
# Returnss: debugOn is a flag variable which toggles on/off the debug mode.
# Returnss: taminatorTime is an interger referring to how much time
# the taminator has left in this world. Standard is 3.
# Returns: taminatorPosition is a list with the position of the taminator.
def cheatMenu(debugOn, taminatorTime, taminatorPosition):
    printBorder()
    printCheatMenu()
    printBorder()
    cheatSelection = restrictedStringInput(("t", "m", "q"))
    if cheatSelection == "t":
        debugOn = True
    elif cheatSelection == "m":
        print("Where shall the taminator appear?")
        print("Which row? Between row 0 and row %i" % (SIZE-1))
        userRowInput = restrictedIntergerInput((x for x in range(0, SIZE)))
        print("Which column? Between column 0 and row %i" % (SIZE-1))
        userColumnInput = restrictedIntergerInput((x for x in range(0, SIZE)))
        taminatorTime = 3
        taminatorPosition = [userRowInput, userColumnInput]
    isCheatOn = False
    return isCheatOn, debugOn, taminatorTime, taminatorPosition


#James Tam "The Taminator"'s Functions:

# Author:  James Tam
# This function was created entirely by the above author and is
# used with permission.
# '''
# @ This function comes the creation of the list with file input.
# @ It combines readFromFile() and intialize() into one function.
# @ Normally a function should only implement one well define task but in this case
# @ the creation of the list is so trivial it may be okay to combine it with file input.
# @createListFileRead()
# @Argument: None
# @Return value: the game world in the form of a 2D list (each element has
# @been initialized to values read in from the input file
# '''
def createListFileRead():
    r = -1
    c = -1
    world = []
    inputFilename = input("Name of input file: ")
    try:
        inputFile = open(inputFilename,"r")
        r = 0
        for line in inputFile:
            world.append([])
            c = 0
            for ch in line:
                if (c < SIZE):
                    world[r].append(ch)
                c = c + 1
            r = r + 1
        inputFile.close()
    except IOError:
        print("Error reading from " + inputFilename)
     
    return(world)

# Author:  James Tam
# This function was created entirely by the above author and is
# used with permission.
# '''
# @display()
# @Argument: a reference the 2D list which is game world.
# @The list must be already created and properly initialized
# @prior to calling this function!
# @Return value: Mone
# @Displays each element of the world with each row all on one line
# @Each element is bound: above, left, right and below with a bar (to
# @make elements easier to see.
# '''
def display(world):
    for r in range (0, SIZE, 1): 
    # Row of dashes before each row 
        for i in range (0, SIZE, 1): 
            print(" -", end="")
        print()
        for c in range (0, SIZE, 1): 
            # Vertical bar before displaying each element
            print("|" + world[r][c], end="")
        print("|") # Vertical bar right of last element + CR to
		           # move output to the next line

    # A line of dashes before each row, one line after the last
    # row.
    for i in range (0, SIZE, 1): 
        print(" -", end="")
    print()

# Author:  James Tam
# This function was created entirely by the above author and is
# used with permission.
# '''
# @ This function works in conjunction with readFromFile()
# @intialize()
# @Argument: None
# @Return value: the game world in the form of a 2D list (each element
# @is set to an exclamation mark).
# '''
def initialize():
    world = []                  
    for r in range (0, SIZE, 1):   
        world.append ([])       
        for c in range (0, SIZE, 1): 
            world[r].append ("!")
    return(world)
	
# '''
# @ This method works in conjunction with initialize. Initialize creates
# @ the list with list elements containing a default value '!'. This method
# @ relies on the list already being created and sets each list element to
# @ a corresponding value read in from the input file e.g. the string at
# @ row 2 and column 4 in the input file will initialize the list element
# @ at this same location in the 2D list (game world).
# @readFromFile()
# @Argument: None
# @Return value: the game world in the form of a 2D list (each element
# @will now be initialized to the values read in from the input file
# '''
def readFromFile():
    r = -1
    c = -1
    world = initialize() # Needed to create the 2D list
    inputFilename = input("Name of input file: ")
    try:
        inputFile = open(inputFilename,"r")
        r = 0
        # Read one line at a time from the file into a string
        for line in inputFile:  
            c = 0
            # Iterate 1 char at a time through the string
            for ch in line:  
                # Including EOL there's 11 characters per line
                # 10x10 list , exclude the EOL to avoid reading
                # outside the bounds of the list (10 columns)
                if (c < SIZE):
                    # Set list element to the single char 
                    # read from file
                    world[r][c] = ch 
                    # Advance to next element along row 
                    c = c + 1  
                # Entire row has been set to values read in from 
                # file, move to next row
            r = r + 1  
        inputFile.close()
    except IOError:
        print("Error reading from " + inputFilename)
    return(world) 


#################################################################
# Author:  James Tam
# This function was created entirely by the above author and is
# used with permission.
# This function has been edited by John Ming Ngo to furfill
# The program requirements.

def start():
    #Initializing world state variables
    world = readFromFile()
    turn = 1
    funPoints = 0
    gpa = 0
    isCheatOn = False
    
    #Scans the world for the positions of all objects except the Taminator:
    workPositions, funPositions, studentPosition = worldObjectScan(world)

    #Reserves variables for the eventual coming of the Taminator:
    taminatorTime = 0
    taminatorPosition = []
    
    #Printing the initial game board
    displayGameBoard(world, gpa, funPoints, turn)
    
    #Game main loop start
    while turn <= NUM_TURNS:
        #Generate a random interger from 1 to 100 for purposes of random events
        eventChance = random.randrange(1, 101)
        #Get user input
        printMovementOptions()
        userMovement = restrictedIntergerInput((0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
        #Do relevant changes
        world[studentPosition[0]][studentPosition[1]] = EMPTY
        previousPosition = studentPosition[:]
        studentMovement(studentPosition, userMovement)
        if (studentPosition[0] > (SIZE-1)) or (studentPosition[1] > (SIZE-1)) or (studentPosition[0] < 0) or (studentPosition[1] < 0):
            studentPosition = previousPosition[:]
            printFutileEscape()
            turn -= 1 
            input("[Hit ENTER to acknowledge our supreme power.]")
        elif studentPosition == taminatorPosition:
            studentPosition = list(previousPosition)
            print("YOU ARE MAD! YOU DARE MOVE ON THE TAMINATOR!?")
            print("Nope, try some other input, madman.")
            turn -= 1
            input("[Hit ENTER to acknowledge your madness.]")
        elif studentPosition in workPositions:
                gpa += 1
        elif studentPosition in funPositions:
                funPoints += 1
        world[studentPosition[0]][studentPosition[1]] = STUDENT
        #Cheat menu:
        if userMovement == 0:
            isCheatOn = True

        if isCheatOn == True:
            isCheatOn, debugOn, taminatorTime, taminatorPosition = cheatMenu(debugOn, taminatorTime, taminatorPosition)

        #Determines if the Pavol or Taminator events apply:

        #Updates which objects other than the taminator exist in this world and in what positions.
        workPositions, funPositions, studentPosition = worldObjectScan(world)

        #Increment turn by one
        turn += 1
        
        #Print the new display
        displayGameBoard(world, gpa, funPoints, turn)
        
    #Print ending stats and message.
    print("Game over! Thirteen weeks have passed!")
    print("Your scores will be saved in a file called score.txt.")
    playerRecord = open("scores.txt", "w")
    try:
        playerRecord.write("Your last game's fun points: %i \n" % funPoints)
        playerRecord.write("Your last game's GPA: %i \n" % gpa) 
    except:
        print("Something went very wrong trying to save your scores. Sorry.")
    finally:
        playerRecord.close()
    input("[Hit enter to close the game]")
start()
